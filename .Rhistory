),
# Dashboard Body
dashboardBody(
# Custom CSS
tags$head(
tags$style(HTML("
.content-wrapper { overflow: auto; }
.small-box { height: 100px; }
"))
),
tabItems(
# Overview Tab
tabItem(tabName = "overview",
fluidRow(
# Info Boxes
infoBoxOutput("totalSuicides"),
infoBoxOutput("avgRate"),
infoBoxOutput("totalCountries")
),
fluidRow(
box(plotlyOutput("timeSeriesPlot"), width = 12,
title = "Suicide Rates Over Time")
),
fluidRow(
box(plotlyOutput("topCountriesPlot"), width = 6,
title = "Top Countries by Suicide Rate"),
box(plotlyOutput("ageDistributionPlot"), width = 6,
title = "Distribution by Age Group")
)
),
# Temporal Analysis Tab
tabItem(tabName = "temporal",
fluidRow(
box(plotlyOutput("yearlyTrendPlot"), width = 12,
title = "Yearly Trends")
),
fluidRow(
box(plotlyOutput("yearOverYearChange"), width = 12,
title = "Year-over-Year Changes")
)
),
# Geographic Analysis Tab
tabItem(tabName = "geographic",
fluidRow(
box(plotlyOutput("worldMap"), width = 12,
title = "Global Distribution")
),
fluidRow(
box(plotlyOutput("countryComparison"), width = 12,
title = "Country Comparisons")
)
),
# Demographics Tab
tabItem(tabName = "demographics",
fluidRow(
box(plotlyOutput("ageSexDistribution"), width = 12,
title = "Age and Gender Distribution")
),
fluidRow(
box(plotlyOutput("genderTrends"), width = 6,
title = "Gender Trends"),
box(plotlyOutput("ageGroupTrends"), width = 6,
title = "Age Group Trends")
)
),
# Economic Factors Tab
tabItem(tabName = "economic",
fluidRow(
box(plotlyOutput("gdpCorrelation"), width = 12,
title = "GDP vs Suicide Rate")
),
fluidRow(
box(plotlyOutput("gdpTrends"), width = 12,
title = "Economic Trends")
)
),
tabItem(tabName = "AI-generated",
fluidRow(
box(plotlyOutput("aiVisualization"), width = 12,
title = "AI-Generated Analysis: GDP & Suicide Rate Relationships",
status = "primary",
solidHeader = TRUE,
footer = "Generated by AI - Analyzing economic, demographic, and temporal patterns in suicide rates.")
)
),
# Download Report Tab
tabItem(tabName = "report",
fluidRow(
box(
title = "Download Options",
width = 12,
fluidRow(
column(6,
h4("Report Options"),
checkboxInput("includeOverview", "Include Overview", TRUE),
checkboxInput("includeTemporal", "Include Temporal Analysis", TRUE),
checkboxInput("includeGeographic", "Include Geographic Analysis", TRUE),
checkboxInput("includeDemographic", "Include Demographic Analysis", TRUE),
checkboxInput("includeEconomic", "Include Economic Analysis", TRUE)
),
column(6,
h4("Format Options"),
radioButtons("reportFormat", "Report Format:",
choices = c("PDF" = "pdf",
"HTML" = "html",
"Word" = "docx")),
downloadButton("downloadReport", "Generate Report"),
br(), br(),
downloadButton("downloadData", "Download Raw Data")
)
)
)
)
)
)
)
)
# Server Definition
server <- function(input, output, session) {
# Load and process data
data <- reactive({
df <- read.csv("suicidedata.csv") %>%
# Process the data
mutate(
year = as.numeric(year),
suicide_rate = suicides_no / population * 100000,
age_group = factor(age,
levels = c("5-14 years", "15-24 years", "25-34 years",
"35-54 years", "55-74 years", "75+ years")
)
) %>%
na.omit()
return(df)
})
# Update filter choices based on data
observe({
req(data())
df <- data()
updateSelectInput(session, "yearRange",
choices = sort(unique(df$year)))
updateSelectInput(session, "countries",
choices = sort(unique(df$country)))
updateSelectInput(session, "ageGroups",
choices = sort(unique(df$age)))
})
# Filter data based on user input
filtered_data <- reactive({
req(data())
df <- data()
if (!is.null(input$yearRange))
df <- df %>% filter(year %in% input$yearRange)
if (!is.null(input$countries))
df <- df %>% filter(country %in% input$countries)
if (!is.null(input$ageGroups))
df <- df %>% filter(age %in% input$ageGroups)
if (!is.null(input$gender))
df <- df %>% filter(sex %in% input$gender)
return(df)
})
# Info Boxes
output$totalSuicides <- renderInfoBox({
req(filtered_data())
infoBox(
"Total Suicides",
format(sum(filtered_data()$suicides_no), big.mark = ","),
icon = icon("user"),
color = "red"
)
})
output$avgRate <- renderInfoBox({
req(filtered_data())
infoBox(
"Average Rate",
paste(round(mean(filtered_data()$suicide_rate), 2), "per 100k"),
icon = icon("chart-line"),
color = "yellow"
)
})
output$totalCountries <- renderInfoBox({
req(filtered_data())
infoBox(
"Countries",
length(unique(filtered_data()$country)),
icon = icon("globe"),
color = "blue"
)
})
# AI Generated Visualization
output$aiVisualization <- renderPlotly({
req(filtered_data())
p <- filtered_data() %>%
# Prepare the data with multiple dimensions
group_by(country, year) %>%
summarise(
suicide_rate = mean(suicide_rate),
gdp = mean(as.numeric(gsub(",", "", `gdp_for_year....`))),
population = sum(population),
total_suicides = sum(suicides_no),
.groups = 'drop'
) %>%
# Create advanced visualization
ggplot(aes(x = gdp, y = suicide_rate)) +
# Main scatter plot
geom_point(aes(size = population, color = total_suicides), alpha = 0.6) +
# Add trend line
geom_smooth(method = "loess", color = "red", se = TRUE) +
# Add text labels for extreme points
geom_text(data = . %>% filter(suicide_rate > quantile(suicide_rate, 0.95)),
aes(label = country), vjust = -1, size = 3) +
# Scale transformations
scale_x_log10(labels = scales::comma_format()) +
scale_size_continuous(labels = scales::comma_format()) +
scale_color_viridis_c(labels = scales::comma_format()) +
# Theming
theme_minimal() +
labs(
title = "Complex Relationship Between Economic Factors and Suicide Rates",
subtitle = "Bubble size represents population, color intensity shows total suicides",
x = "GDP (log scale)",
y = "Suicide Rate per 100k Population"
)
# Convert to plotly for interactivity
ggplotly(p, tooltip = c("country", "gdp", "suicide_rate", "population", "total_suicides")) %>%
layout(showlegend = TRUE)
})
# Time Series Plot
output$timeSeriesPlot <- renderPlotly({
req(filtered_data())
p <- filtered_data() %>%
group_by(year, sex) %>%
summarise(avg_rate = mean(suicide_rate), .groups = 'drop') %>%
ggplot(aes(x = year, y = avg_rate, color = sex)) +
geom_line(size = 1) +
geom_point(size = 2) +
theme_minimal() +
labs(
title = "Global Suicide Rates Over Time by Gender",
x = "Year",
y = "Rate (per 100k population)",
color = "Gender"
) +
scale_y_continuous(labels = comma)
ggplotly(p)
})
# Top Countries Plot
output$topCountriesPlot <- renderPlotly({
req(filtered_data())
p <- filtered_data() %>%
group_by(country) %>%
summarise(avg_rate = mean(suicide_rate), .groups = 'drop') %>%
arrange(desc(avg_rate)) %>%
head(10) %>%
ggplot(aes(x = reorder(country, avg_rate), y = avg_rate)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
x = "Country",
y = "Average Suicide Rate (per 100k population)"
)
ggplotly(p)
})
# Age Distribution Plot
output$ageDistributionPlot <- renderPlotly({
req(filtered_data())
p <- filtered_data() %>%
ggplot(aes(x = age_group, y = suicide_rate, fill = sex)) +
geom_boxplot(alpha = 0.7) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
x = "Age Group",
y = "Suicide Rate (per 100k population)",
fill = "Gender"
)
ggplotly(p)
})
# Yearly Trend Plot
output$yearlyTrendPlot <- renderPlotly({
req(filtered_data())
p <- filtered_data() %>%
group_by(year) %>%
summarise(
avg_rate = mean(suicide_rate),
se = sd(suicide_rate) / sqrt(n()),
.groups = 'drop'
) %>%
ggplot(aes(x = year, y = avg_rate)) +
geom_line() +
geom_ribbon(aes(ymin = avg_rate - se, ymax = avg_rate + se),
alpha = 0.2) +
theme_minimal() +
labs(
x = "Year",
y = "Average Suicide Rate (per 100k population)"
)
ggplotly(p)
})
# Year over Year Change Plot
output$yearOverYearChange <- renderPlotly({
req(filtered_data())
p <- filtered_data() %>%
group_by(year) %>%
summarise(avg_rate = mean(suicide_rate), .groups = 'drop') %>%
mutate(yoy_change = (avg_rate - lag(avg_rate)) / lag(avg_rate) * 100) %>%
filter(!is.na(yoy_change)) %>%
ggplot(aes(x = year, y = yoy_change)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
x = "Year",
y = "Year-over-Year Change (%)"
)
ggplotly(p)
})
# GDP Correlation Plot
output$gdpCorrelation <- renderPlotly({
req(filtered_data())
p <- filtered_data() %>%
ggplot(aes(x = gdp_per_capita, y = suicide_rate)) +
geom_point(aes(color = sex, size = population), alpha = 0.6) +
scale_x_log10(labels = comma) +
theme_minimal() +
labs(
x = "GDP per Capita (log scale)",
y = "Suicide Rate (per 100k population)",
color = "Gender",
size = "Population"
)
ggplotly(p)
})
# GDP Trends Plot
output$gdpTrends <- renderPlotly({
req(filtered_data())
p <- filtered_data() %>%
group_by(year, country) %>%
summarise(
avg_rate = mean(suicide_rate),
gdp = mean(gdp_per_capita),
.groups = 'drop'
) %>%
ggplot(aes(x = gdp, y = avg_rate, color = year)) +
geom_point() +
scale_x_log10(labels = comma) +
scale_color_viridis() +
theme_minimal() +
labs(
x = "GDP per Capita (log scale)",
y = "Average Suicide Rate (per 100k population)",
color = "Year"
)
ggplotly(p)
})
# Generate Report Content
generate_report_content <- function() {
# Create a temporary directory for report generation
report_dir <- tempdir()
# Create R Markdown content
rmd_content <- c(
"---",
paste("title: 'Global Suicide Rates Analysis Report'"),
paste("date: '", format(Sys.time(), "%B %d, %Y"), "'"),
"output:",
"  html_document:",
"    theme: cosmo",
"    toc: true",
"    toc_float: true",
"---",
"",
"```{r setup, include=FALSE}",
"knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)",
"library(tidyverse)",
"library(knitr)",
"library(plotly)",
"```",
"",
"# Executive Summary",
sprintf("This report analyzes suicide rates across different countries from %d to %d.",
min(filtered_data()$year), max(filtered_data()$year)),
"",
"## Key Findings",
sprintf("- Total number of recorded suicides: %s",
format(sum(filtered_data()$suicides_no), big.mark = ",")),
sprintf("- Average suicide rate: %.2f per 100,000 population",
mean(filtered_data()$suicide_rate)),
sprintf("- Number of countries analyzed: %d",
length(unique(filtered_data()$country))),
"",
"# Detailed Analysis",
"",
"## Temporal Trends",
"```{r temporal}",
"filtered_data %>%",
"  group_by(year, sex) %>%",
"  summarise(avg_rate = mean(suicide_rate)) %>%",
"  ggplot(aes(x = year, y = avg_rate, color = sex)) +",
"  geom_line() +",
"  theme_minimal() +",
"  labs(title = 'Suicide Rates Over Time by Gender',",
"       x = 'Year',",
"       y = 'Rate per 100k population')",
"```",
"",
"## Geographic Distribution",
"```{r geographic}",
"filtered_data %>%",
"  group_by(country) %>%",
"  summarise(avg_rate = mean(suicide_rate)) %>%",
"  arrange(desc(avg_rate)) %>%",
"  head(10) %>%",
"  ggplot(aes(x = reorder(country, avg_rate), y = avg_rate)) +",
"  geom_bar(stat = 'identity') +",
"  coord_flip() +",
"  theme_minimal() +",
"  labs(title = 'Top 10 Countries by Suicide Rate',",
"       x = 'Country',",
"       y = 'Average Rate per 100k population')",
"```",
"",
"## Demographic Analysis",
"```{r demographics}",
"filtered_data %>%",
"  ggplot(aes(x = age_group, y = suicide_rate, fill = sex)) +",
"  geom_boxplot() +",
"  theme_minimal() +",
"  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +",
"  labs(title = 'Suicide Rates by Age Group and Gender',",
"       x = 'Age Group',",
"       y = 'Rate per 100k population')",
"```",
"",
"## Economic Analysis",
"```{r economic}",
"filtered_data %>%",
"  ggplot(aes(x = gdp_per_capita, y = suicide_rate)) +",
"  geom_point(alpha = 0.5) +",
"  scale_x_log10() +",
"  theme_minimal() +",
"  labs(title = 'GDP per Capita vs Suicide Rate',",
"       x = 'GDP per Capita (log scale)',",
"       y = 'Rate per 100k population')",
"```",
"",
"# Conclusions",
paste("Analysis based on data filtered for:",
ifelse(length(input$countries) > 0,
paste("Countries:", paste(input$countries, collapse = ", ")), "All countries"),
ifelse(length(input$yearRange) > 0,
paste("Years:", paste(input$yearRange, collapse = ", ")), "All years")),
"",
"# Methodology",
"This analysis was conducted using R and the following packages:",
"- tidyverse for data manipulation",
"- ggplot2 for visualization",
"- plotly for interactive charts",
"",
"Data was processed to calculate suicide rates per 100,000 population and filtered according to user selections."
)
# Write to temporary file
rmd_file <- file.path(report_dir, "report.Rmd")
writeLines(rmd_content, rmd_file)
return(rmd_file)
}
# Download Report Handler
output$downloadReport <- downloadHandler(
filename = function() {
paste("suicide-analysis-report-",
format(Sys.time(), "%Y%m%d-%H%M%S"),
".", input$reportFormat,
sep = "")
},
content = function(file) {
# Generate report content
rmd_file <- generate_report_content()
# Set up parameters based on user selections
params <- list(
include_overview = input$includeOverview,
include_temporal = input$includeTemporal,
include_geographic = input$includeGeographic,
include_demographic = input$includeDemographic,
include_economic = input$includeEconomic
)
# Render the report
rmarkdown::render(
input = rmd_file,
output_file = file,
output_format = switch(
input$reportFormat,
"pdf" = pdf_document(),
"html" = html_document(),
"docx" = word_document()
),
params = params,
envir = new.env(parent = globalenv())
)
}
)
# Download Data Handler
output$downloadData <- downloadHandler(
filename = function() {
paste("suicide-data-",
format(Sys.time(), "%Y%m%d-%H%M%S"),
".csv",
sep = "")
},
content = function(file) {
write.csv(filtered_data(), file, row.names = FALSE)
}
)
}
# Run the app
shinyApp(ui = ui, server = server)
